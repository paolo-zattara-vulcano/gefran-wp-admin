(function(){"use strict";var __webpack_modules__={259:function(){eval("\n;// CONCATENATED MODULE: ./build/src/modules/ExternalSites/resources/js/ExternalSites.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar LANGUAGE_ID_REGEXP = /-(\\d+)-/i;\nvar LANGUAGE_NAME_REGEXP = /\\[(\\d+)\\]/i;\nvar NEGATIVE_LANGUAGE_NAME_REGEXP = /\\[-(\\d+)\\]/i;\n/**\n * Create the New Language button element\n *\n * @returns {HTMLElement}\n */\n\nfunction createNewExternalSiteButton($table, externalSitesStrings) {\n  var button = jQuery(\"<p class=\\\"mlp-external-site\\\">\\n            <button class=\\\"button\\\">\\n                \".concat(externalSitesStrings.newExternalSiteButtonLabel, \"\\n            </button>\\n        </p>\"));\n  button.insertAfter($table);\n  return button;\n}\n/**\n * Create a language delete action button.\n *\n * @param {HTMLElement} $table\n * @returns {HTMLElement}\n */\n\n\nfunction createExternalSiteDeleter($table, externalSitesStrings) {\n  var $deletor = jQuery(\"<td data-label=\\\"Deletor\\\">\\n            <button class=\\\"mlp-external-site-deletor button dashicons dashicons-trash\\\" data-action=\\\"delete\\\">\\n                <span class=\\\"screen-reader-text\\\">\\n                    \".concat(externalSitesStrings.externalSiteDeleteButtonLabel, \"\\n                </span>\\n            </button>\\n        </td>\"));\n  var $deletorHead = jQuery(\"<th scope=\\\"col\\\" data-label=\\\"Deletor\\\">\\n            \".concat(externalSitesStrings.externalSiteDeleteTableHeadLabel, \"\\n        </th>\"));\n  $table.find('thead > tr th:last-of-type').after($deletorHead.clone());\n  $table.find('tfoot > tr th:last-of-type').after($deletorHead.clone());\n  $table.find('tbody > tr td:last-of-type').after($deletor);\n  return jQuery('.mlp-external-site-deletor');\n}\n/**\n * Clone the table row so it's possible to add more than one language at a time.\n *\n * @returns {HTMLElement}\n */\n\n\nfunction cloneTableRow($tableRow) {\n  var $clone = $tableRow.clone(false);\n  $clone.hide().insertAfter($tableRow);\n  $clone.find('input').each(function (index, input) {\n    jQuery(input).val('');\n    jQuery(input).removeAttr('checked');\n  });\n  return $clone;\n}\n/**\n * Hide Element\n *\n * @returns void\n */\n\n\nfunction hideElement(element) {\n  element = jQuery(element);\n  element.length && element.hide();\n}\n/**\n * Show Element\n *\n * @returns void\n */\n\n\nfunction showElement(element) {\n  element = jQuery(element);\n  element.length && element.show();\n}\n/**\n * Get the next language id to create the new language item.\n *\n * @returns {number}\n */\n\n\nfunction nextExternalSiteId($tableRow) {\n  var invalidId = -1;\n  var input = $tableRow.find('input');\n\n  if (!input) {\n    return invalidId;\n  }\n\n  var regexp = new RegExp(LANGUAGE_NAME_REGEXP).exec(input[0].getAttribute('name'));\n  return Array.isArray(regexp) ? ++regexp[1] : invalidId;\n}\n/**\n * Increment the language number for inputs\n *\n * Usually done after a table row has been cloned\n *\n * @param $inputs\n * @param number\n */\n\n\nfunction incrementExternalSiteId($inputs, number) {\n  $inputs.each(function (index, input) {\n    var nameAttribute = input.getAttribute('name');\n    var idAttribute = input.getAttribute('id');\n    input.setAttribute('name', nameAttribute.replace(LANGUAGE_NAME_REGEXP, '[' + number + ']'));\n    input.setAttribute('id', idAttribute.replace(LANGUAGE_ID_REGEXP, '-' + number + '-'));\n  });\n}\n/**\n * Negative numbers means the language will be deleted from the database, positive numbers\n * means language will be updated or created.\n *\n * @param $inputs\n * @param positive\n */\n\n\nfunction changeSignToExternalSiteId($inputs, positive) {\n  $inputs.each(function (index, input) {\n    var nameAttribute = input.getAttribute('name');\n    input.setAttribute('name', nameAttribute.replace(positive ? NEGATIVE_LANGUAGE_NAME_REGEXP : LANGUAGE_NAME_REGEXP, positive ? '[$1]' : '[-$1]'));\n  });\n}\n/**\n * Add new language row\n *\n * @returns void\n */\n\n\nfunction addExternalSite($tableRow) {\n  showElement($tableRow);\n  var nextId = nextExternalSiteId($tableRow);\n\n  if (-1 === nextId) {\n    return;\n  }\n\n  var $clone = cloneTableRow($tableRow);\n  incrementExternalSiteId($clone.find('input, select'), nextId);\n}\n/**\n * Undo Delete Language\n *\n * @param $deleter\n * @param languageManagerStrings\n */\n\n\nfunction undoDeleteExternalSite($deleter, externalSitesStrings) {\n  $deleter = jQuery($deleter);\n\n  if (!$deleter.length) {\n    return;\n  }\n\n  var $row = $deleter.parents('tr');\n\n  if (!$row.length) {\n    return;\n  }\n\n  var $undo = $deleter.attr('data-action') === 'undo';\n  var callback = $undo ? function (index, input) {\n    jQuery(input).removeAttr('readonly').css('opacity', 1);\n  } : function (index, input) {\n    jQuery(input).attr('readonly', 'readonly').css('opacity', .2);\n  };\n  var label = $undo ? externalSitesStrings.externalSiteDeleteButtonLabel : externalSitesStrings.externalSiteUndoDeleteButtonLabel;\n  var $inputs = $row.find('input');\n  $inputs.each(callback);\n  $deleter.attr('data-action', $undo ? 'delete' : 'undo').find('span').text(label);\n  $row.find('button').toggleClass('dashicons-undo dashicons-trash');\n  changeSignToExternalSiteId($inputs, $undo);\n}\n/**\n * Retrieve latest table Row\n *\n * @param $table\n * @returns {*}\n */\n\n\nfunction latestTableRow($table) {\n  return $table.find('tbody tr:last-of-type');\n}\n/**\n * External Sites\n */\n\n\nvar ExternalSites = /*#__PURE__*/function () {\n  function ExternalSites(externalSitesStrings) {\n    _classCallCheck(this, ExternalSites);\n\n    this.externalSitesStrings = externalSitesStrings;\n    this.didInit = false;\n  }\n  /**\n   * Initialize\n   *\n   * @returns void\n   */\n\n\n  _createClass(ExternalSites, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      if (this.didInit) {\n        return;\n      }\n\n      var $table = jQuery('#mlp-external-sites-table');\n\n      if (!$table) {\n        return;\n      }\n\n      hideElement(latestTableRow($table));\n      var $deleter = createExternalSiteDeleter($table, this.externalSitesStrings);\n      $deleter.on('click', function (evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        undoDeleteExternalSite(evt.currentTarget, _this.externalSitesStrings);\n      });\n      var $button = createNewExternalSiteButton($table, this.externalSitesStrings);\n      $button.click(function (evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        var $latestTableRow = latestTableRow($table);\n        addExternalSite($latestTableRow);\n      });\n      this.didInit = true;\n    }\n  }]);\n\n  return ExternalSites;\n}();\n;// CONCATENATED MODULE: ./build/src/modules/ExternalSites/resources/js/NavMenu.js\nvar ExternalSitesNavMenu = function ExternalSitesNavMenu($, $submitButton, $menuToEdit, $menuInput) {\n  var init = false;\n  var $externalSiteInputs;\n  var $selectAll;\n  var $spinner;\n  /**\n   * Shows or hide the spinner.\n   *\n   * @param {bool} enable\n   */\n\n  var spinner = function spinner(enable) {\n    $spinner.css('visibility', enable ? 'visible' : 'hidden');\n  };\n  /**\n   * The currently selected external sites.\n   *\n   * @return {number[]}\n   */\n\n\n  var externalSiteIds = function externalSiteIds() {\n    var externalSiteIds = [];\n    $externalSiteInputs.filter(':checked').each(function () {\n      externalSiteIds.push(Number($(this).val() || 0));\n    });\n    return externalSiteIds;\n  };\n  /**\n   * Enable or disable the sumbit button based on external sites being selected.\n   */\n\n\n  var updateSumbit = function updateSumbit() {\n    $submitButton.prop('disabled', !($menuToEdit.length && externalSiteIds().length));\n  };\n  /**\n   * Executes on AJAX error.\n   */\n\n\n  var onAjaxError = function onAjaxError() {\n    alert('AJAX error.');\n  };\n  /**\n   * Executes on AJAX success and append the menu markup received via AJAX, which is passed as parameter,\n   * to the current menu.\n   *\n   * @param {jQuery} $menu\n   */\n\n\n  var onAjaxSuccess = function onAjaxSuccess($menu) {\n    if (!$menu.length) {\n      onAjaxError();\n      return;\n    }\n\n    $menuToEdit.append($menu);\n  };\n  /**\n   * @param {number[]} ids\n   * @return {{action, mlp_external_sites: *, menu: *}}\n   */\n\n\n  var ajaxData = function ajaxData(ids) {\n    var nonceAction = $submitButton.data('nonce-action');\n    var nonceValue = $submitButton.data('nonce');\n    var ajaxAction = $submitButton.data('action');\n    var data = {\n      action: ajaxAction,\n      mlp_external_sites: ids,\n      menu: $menuInput.val()\n    };\n    data[nonceAction] = nonceValue;\n    return data;\n  };\n  /**\n   * Send the AJAX request to update the menu for the given external site IDs.\n   *\n   * @param {number[]} ids\n   */\n\n\n  var sendRequest = function sendRequest(ids) {\n    spinner(true);\n    $submitButton.prop('disabled', true);\n    $externalSiteInputs.prop('disabled', true);\n    $.ajax({\n      url: ajaxurl,\n      method: 'POST',\n      dataType: 'json',\n      data: ajaxData(ids)\n    }).done(function (response) {\n      if (response.success && response.data && typeof response.data === 'string') {\n        onAjaxSuccess($(response.data));\n        return;\n      }\n\n      onAjaxError();\n    }).fail(function () {\n      onAjaxError();\n    }).always(function () {\n      spinner(false);\n      $externalSiteInputs.prop('checked', false);\n      $externalSiteInputs.prop('disabled', false);\n      $submitButton.prop('disabled', true);\n    });\n  };\n  /**\n   * Init the class by setting events callbacks on the jQuery element.\n   *\n   */\n\n\n  this.init = function () {\n    if (!init) {\n      $externalSiteInputs = $($submitButton.data('external-sites'));\n      $selectAll = $($submitButton.data('select-all'));\n      $spinner = $submitButton.siblings('.spinner');\n      $externalSiteInputs.click(function () {\n        updateSumbit();\n      });\n      $selectAll.click(function (e) {\n        e.preventDefault();\n        $externalSiteInputs.prop('checked', true);\n        updateSumbit();\n      });\n      $submitButton.click(function () {\n        var ids = externalSiteIds();\n\n        if (ids && $menuToEdit.length) {\n          sendRequest(ids);\n        }\n      });\n      updateSumbit();\n      init = true;\n    }\n\n    return this;\n  };\n};\n;// CONCATENATED MODULE: ./build/src/modules/ExternalSites/resources/js/admin.js\n\n\n'use strict';\n\n(function ($, M, adminpage, externalSitesStrings) {\n  if (adminpage === 'multilingualpress_page_external-sites') {\n    var _externalSites = new ExternalSites(externalSitesStrings);\n\n    _externalSites.init();\n  }\n\n  if (adminpage === 'nav-menus-php') {\n    var navMenu = new ExternalSitesNavMenu($, $('#mlp-navMenu-external-sites-submit'), $('#menu-to-edit'), $('#menu'));\n    navMenu.init();\n  }\n\n  var redirectFallbackSelect = document.querySelector('#multilingualpress_module_redirect_settings_fallback_site_id');\n  var redirectFallbackExternalSiteSelect = document.querySelector('#multilingualpress_module_redirect_settings_fallback_external_site_id');\n  var redirectFallbackSelectExists = redirectFallbackSelect !== null;\n  var redirectFallbackExternalSiteSelectExists = redirectFallbackExternalSiteSelect !== null;\n\n  if (redirectFallbackSelectExists && redirectFallbackExternalSiteSelectExists) {\n    redirectFallbackSelect.addEventListener('change', function () {\n      redirectFallbackExternalSiteSelect.disabled = false;\n\n      if (this.value !== '0') {\n        redirectFallbackExternalSiteSelect.value = '0';\n        redirectFallbackExternalSiteSelect.disabled = true;\n      }\n    });\n    redirectFallbackSelect.dispatchEvent(new Event('change'));\n  }\n})(jQuery, MultilingualPress, adminpage, externalSites);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///259\n")}},__webpack_exports__={};__webpack_modules__[259]()})();
//# sourceMappingURL=admin.min.js.map